#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Datos de la gr√°fica 100x100
tama√±os_pagina = [256, 512, 1024, 2048, 4096]
fallos_pagina = [535, 301, 184, 126, 98]

# Datos de las configuraciones adicionales
configuraciones = ['Config 1', 'Config 2', 'Config 3', 'Config 4']
tasa_fallos_config = [0.39, 0.80, 0.20, 1.58]

print("=== GR√ÅFICA OPCI√ìN 2: AN√ÅLISIS DE MEMORIA VIRTUAL ===\n")

# Gr√°fica 1: Fallos de p√°gina vs Tama√±o de p√°gina (ASCII)
print("üìä GR√ÅFICA 1: FALLOS DE P√ÅGINA VS TAMA√ëO DE P√ÅGINA (Matrices 100x100)")
print("=" * 70)
print("Tama√±o P√°gina (bytes) | Fallos de P√°gina | Gr√°fica ASCII")
print("-" * 70)

max_fallos = max(fallos_pagina)
for i, (tama√±o, fallos) in enumerate(zip(tama√±os_pagina, fallos_pagina)):
    # Crear barra ASCII
    barra_length = int((fallos / max_fallos) * 40)
    barra = "‚ñà" * barra_length
    
    print(f"{tama√±o:>8} bytes        | {fallos:>8} fallos    | {barra} {fallos}")

print("\nüìà TENDENCIA: RELACI√ìN INVERSA")
print("   ‚Ä¢ P√°ginas m√°s grandes = Menos fallos de p√°gina")
print("   ‚Ä¢ Reducci√≥n del 81.7% (535 ‚Üí 98 fallos)")
print("   ‚Ä¢ Mejor aprovechamiento de localidad espacial")

print("\n" + "=" * 70)

# Gr√°fica 2: Tasa de fallos por configuraci√≥n (ASCII)
print("\nüìä GR√ÅFICA 2: TASA DE FALLOS POR CONFIGURACI√ìN (Opci√≥n 2)")
print("=" * 70)
print("Configuraci√≥n | Tasa Fallos (%) | Gr√°fica ASCII | Eficiencia")
print("-" * 70)

max_tasa = max(tasa_fallos_config)
for i, (config, tasa) in enumerate(zip(configuraciones, tasa_fallos_config)):
    # Crear barra ASCII
    barra_length = int((tasa / max_tasa) * 30)
    barra = "‚ñà" * barra_length
    
    # Determinar eficiencia
    if tasa <= 0.5:
        eficiencia = "üü¢ EXCELENTE"
    elif tasa <= 1.0:
        eficiencia = "üü° BUENA"
    else:
        eficiencia = "üî¥ REGULAR"
    
    print(f"{config:>12} | {tasa:>8.2f}%      | {barra} {tasa}% | {eficiencia}")

print("\nüèÜ CONFIGURACI√ìN √ìPTIMA: Config 3 (0.20% fallos)")
print("   ‚Ä¢ Tama√±o de p√°gina: 2048 bytes")
print("   ‚Ä¢ N√∫mero de procesos: 3")
print("   ‚Ä¢ Matrices grandes: 80x80 a 100x100")

print("\n" + "=" * 70)

# Datos para Excel/Google Sheets
print("\nüìã DATOS PARA CREAR GR√ÅFICA EN EXCEL/GOOGLE SHEETS:")
print("=" * 70)
print("Tama√±o P√°gina (bytes),Fallos de P√°gina")
for tama√±o, fallos in zip(tama√±os_pagina, fallos_pagina):
    print(f"{tama√±o},{fallos}")

print("\nConfiguraci√≥n,Tasa Fallos (%)")
for config, tasa in zip(configuraciones, tasa_fallos_config):
    print(f"{config},{tasa}")

print("\n" + "=" * 70)

# An√°lisis detallado
print("\nüîç AN√ÅLISIS DETALLADO:")
print("=" * 70)
print("1. RELACI√ìN INVERSA CONFIRMADA:")
print("   ‚Ä¢ 256 bytes ‚Üí 535 fallos (peor rendimiento)")
print("   ‚Ä¢ 4096 bytes ‚Üí 98 fallos (mejor rendimiento)")
print("   ‚Ä¢ Reducci√≥n progresiva y consistente")

print("\n2. EFICIENCIA MARGINAL DECRECIENTE:")
print("   ‚Ä¢ 256‚Üí512 bytes: -43.7% fallos")
print("   ‚Ä¢ 512‚Üí1024 bytes: -38.9% fallos")
print("   ‚Ä¢ 1024‚Üí2048 bytes: -31.5% fallos")
print("   ‚Ä¢ 2048‚Üí4096 bytes: -22.2% fallos")

print("\n3. CONFIGURACI√ìN √ìPTIMA IDENTIFICADA:")
print("   ‚Ä¢ Config 3: 0.20% fallos (m√°s eficiente)")
print("   ‚Ä¢ Config 4: 1.58% fallos (menos eficiente)")
print("   ‚Ä¢ Diferencia de 8x en eficiencia")

print("\n4. JUSTIFICACI√ìN T√âCNICA:")
print("   ‚Ä¢ P√°ginas grandes aprovechan mejor localidad espacial")
print("   ‚Ä¢ Menos cambios de p√°gina durante procesamiento")
print("   ‚Ä¢ Algoritmo LRU m√°s efectivo con p√°ginas grandes")
print("   ‚Ä¢ Acceso secuencial (row-major) optimizado")

print("\n" + "=" * 70)
print("‚úÖ GR√ÅFICA GENERADA EXITOSAMENTE")
print("üìÅ Usa los datos CSV para crear gr√°ficas en Excel/Google Sheets")
print("üéØ Configuraci√≥n recomendada: 2048 bytes, 3 procesos, matrices grandes")
